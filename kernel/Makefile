
OSNAME = CustomOS

GNUEFI = ../gnu-efi
LDS = kernel.ld
CC = gcc
ASMC = nasm
LD = ld

CFLAGS = -ffreestanding -fshort-wchar -mno-red-zone -fno-exceptions -fno-stack-protector
ASMFLAGS =
LDFLAGS = -T $(LDS) -static -Bsymbolic -nostdlib

SRCDIR := src
OBJDIR := lib
FONTDIR := fonts
BUILDDIR = bin
BOOTEFI := $(GNUEFI)/x86_64/bootloader/main.efi

rwildcard=$(foreach d,$(wildcard $(1:=/*)),$(call rwildcard,$d,$2) $(filter $(subst *,%,$2),$d))

SRC = $(call rwildcard,$(SRCDIR),*.cpp)
ASMSRC = $(call rwildcard,$(SRCDIR),*.asm)
OBJS = $(patsubst $(SRCDIR)/%.cpp, $(OBJDIR)/%.o, $(SRC))
OBJS += $(patsubst $(SRCDIR)/%.asm, $(OBJDIR)/%_asm.o, $(ASMSRC))
DIRS = $(wildcard $(SRCDIR)/*)

all: setup kernel buildimg

.PHONEY: setup kernel link buildimg run clean

kernel: $(OBJS) link

$(OBJDIR)/interrupts/interrupts.o: $(SRCDIR)/interrupts/interrupts.cpp
	@ echo !==== COMPILING $^
	@ mkdir -p $(@D)
	$(CC) -mno-red-zone -mgeneral-regs-only -ffreestanding -c $^ -o $@

$(OBJDIR)/%.o: $(SRCDIR)/%.cpp
	@ echo !==== COMPILING $^
	@ mkdir -p $(@D)
	$(CC) $(CFLAGS) -c $^ -o $@

$(OBJDIR)/%_asm.o: $(SRCDIR)/%.asm
	@ echo !==== COMPILING $^
	@ mkdir -p $(@D)
	$(ASMC) $(ASMFLAGS) $^ -f elf64 -o $@

link:
	@ echo !==== LINKING
	$(LD) $(LDFLAGS) -o $(BUILDDIR)/kernel.elf $(OBJS)

setup:
	@mkdir $(BUILDDIR)
	@mkdir $(OBJDIR)

buildimg:
	dd if=/dev/zero of=$(BUILDDIR)/$(OSNAME).img bs=512 count=93750
	../mtools/bin/mformat -i $(BUILDDIR)/$(OSNAME).img -v "SeshOS" -f 1440 ::
	../mtools/bin/mmd -i $(BUILDDIR)/$(OSNAME).img ::/EFI
	../mtools/bin/mmd -i $(BUILDDIR)/$(OSNAME).img ::/EFI/BOOT
	cp $(BOOTEFI) ./bootx64.efi
	../mtools/bin/mcopy -i $(BUILDDIR)/$(OSNAME).img ./bootx64.efi ::/EFI/BOOT
	rm -rf ./bootx64.efi
	../mtools/bin/mcopy -i $(BUILDDIR)/$(OSNAME).img $(BUILDDIR)/kernel.elf ::
	../mtools/bin/mcopy -i $(BUILDDIR)/$(OSNAME).img $(FONTDIR)/zap-light16.psf ::
	../mtools/bin/mcopy -i $(BUILDDIR)/$(OSNAME).img test.txt ::


run:
	qemu-system-x86_64 -machine q35 -drive file=$(BUILDDIR)/$(OSNAME).img -m 1G -cpu qemu64 \
	-drive if=pflash,format=raw,unit=0,file="../OVMF_CODE.fd",readonly=on \
	-drive if=pflash,format=raw,unit=1,file="../OVMF_VARS.fd" -net none \
	-debugcon stdio

clean:
	rm -rvf $(OBJDIR)
	rm -rvf $(BUILDDIR)
